# UserManagement 시스템 완성 가이드 📋

## 📚 프로젝트 개요

**목표**: 기존 Windows Forms 주식 자동매매 프로그램에 사용자 인증 시스템 추가
- 관리자가 웹페이지에서 사용자 계정 관리
- 사용자는 등록된 계정으로만 Windows Forms 프로그램 접근 가능
- 실계좌/모의투자 계좌 구분 및 권한 관리

---

## 🏗️ 시스템 아키텍처

```
[Windows Forms 앱] ←→ [Web API] ←→ [데이터베이스]
                                ↑
                        [관리자 웹페이지]
```

### 실행 흐름:
1. **Windows Forms 앱 시작** → UserLoginForm
2. **사용자 API 인증** → 성공 시 MainForm
3. **키움 API 로그인** → 계좌번호 검증
4. **자동매매 프로그램 실행**

---

## 💾 데이터베이스 구조

### 📊 **테이블 스키마**

#### Admins 테이블:
```sql
CREATE TABLE Admins (
    Id INT IDENTITY(1,1) PRIMARY KEY,
    Email NVARCHAR(255) NOT NULL UNIQUE,
    PasswordHash NVARCHAR(255) NOT NULL,
    CreatedAt DATETIME2 DEFAULT GETDATE()
);
```

#### Users 테이블:
```sql
CREATE TABLE Users (
    Id INT IDENTITY(1,1) PRIMARY KEY,
    Email NVARCHAR(255) NOT NULL UNIQUE,
    PasswordHash NVARCHAR(255) NOT NULL,
    IsActive BIT DEFAULT 1,
    CreatedAt DATETIME2 DEFAULT GETDATE(),
    CreatedBy INT FOREIGN KEY REFERENCES Admins(Id),
    AccountNumber NVARCHAR(20) NULL,
    IsRealAccount BIT DEFAULT 0,
    AccountVerified BIT DEFAULT 0
);
```

### 🔧 **데이터베이스 초기 설정**
```sql
-- 기본 관리자 계정 생성 (비밀번호: admin123)
INSERT INTO Admins (Email, PasswordHash, CreatedAt) 
VALUES ('admin@company.com', '$2a$11$vI8aWBnW3fID.ZQ4/zo1G.q1lRps.9cGLcZEiGDMVr5yUzTcs5XTK', GETDATE());
```

---

## 🌐 Web API 프로젝트 (UserManagementSystem)

### 📁 **프로젝트 구조**
```
UserManagementSystem/
├── Controllers/
│   └── AuthController.cs
├── Models/
│   ├── ApplicationDbContext.cs
│   ├── Admin.cs
│   └── User.cs
├── admin.html
├── test.html
├── appsettings.json
├── Startup.cs
└── Program.cs
```

### 🔑 **주요 API 엔드포인트**

#### 인증 관련:
- `POST /api/Auth/admin/login` - 관리자 로그인
- `POST /api/Auth/admin/create` - 관리자 계정 생성
- `POST /api/Auth/user/login` - 사용자 로그인
- `POST /api/Auth/user/register` - 사용자 등록

#### 사용자 관리:
- `GET /api/Auth/users` - 사용자 목록 조회
- `GET /api/Auth/user/{userId}/account` - 사용자 계좌 정보 조회
- `PUT /api/Auth/admin/user/{userId}/account` - 계좌 정보 업데이트
- `DELETE /api/Auth/user/{userId}` - 사용자 삭제
- `POST /api/Auth/user/verify-account` - 계좌 접근 권한 검증

### 📦 **필요한 NuGet 패키지**
```
Microsoft.EntityFrameworkCore.SqlServer (5.0.17)
Microsoft.EntityFrameworkCore.Tools (5.0.17)
Microsoft.EntityFrameworkCore.Design (5.0.17)
BCrypt.Net-Next
```

### ⚙️ **연결 문자열 (appsettings.json)**
```json
{
  "ConnectionStrings": {
    "DefaultConnection": "Server=(localdb)\\MSSQLLocalDB;Database=UserManagementDB;Trusted_Connection=true;MultipleActiveResultSets=true;"
  }
}
```

---

## 🖥️ Windows Forms 프로젝트 (StockAutoTrade2)

### 📁 **추가된 파일들**
```
StockAutoTrade2/
├── UserLoginForm.cs          (새로 추가)
├── UserLoginForm.Designer.cs (새로 추가)
├── UserAuthManager.cs        (새로 추가)
├── MainForm.cs              (기존 - 수정됨)
├── LoginManager.cs          (기존)
└── Program.cs               (수정됨)
```

### 🔧 **Program.cs 수정**
```csharp
// 시작 폼을 UserLoginForm으로 변경
Application.Run(new UserLoginForm());
```

### 📦 **필요한 NuGet 패키지**
```
Newtonsoft.Json
```

### 🏷️ **네임스페이스 통일**
모든 파일에서 `namespace StockAutoTrade2` 사용

---

## 🌐 관리자 웹페이지 (admin.html)

### ✨ **주요 기능**
1. **관리자 로그인** - admin@company.com / admin123
2. **대시보드** - 사용자 통계 및 최근 등록 현황
3. **사용자 관리** - 목록 조회, 수정, 삭제
4. **사용자 추가** - 이메일, 비밀번호, 계좌번호 등록

### 🎯 **계좌 관리 기능**
- **실계좌 (5로 시작)**: 관리자 승인 필요
- **모의투자 (8로 시작)**: 자동 승인
- 계좌번호 유효성 검사 (10자리)

---

## 🔄 사용자 인증 흐름

### 👤 **일반 사용자 흐름**
```
1. Windows Forms 앱 실행
2. UserLoginForm에서 이메일/비밀번호 입력
3. API 서버로 인증 요청
4. 성공 시 MainForm으로 전환
5. 키움 API 로그인
6. 계좌번호 검증 (실계좌는 승인 필요)
7. 자동매매 프로그램 실행
```

### 👨‍💼 **관리자 흐름**
```
1. admin.html 접속
2. 관리자 로그인
3. 사용자 등록/관리
4. 계좌번호 승인/거부
```

---

## 🛡️ 보안 기능

### 🔒 **인증 보안**
- BCrypt 패스워드 해싱
- HTTPS 통신 강제
- 세션 타임아웃 관리

### 🌐 **네트워크 보안**
- 인터넷 연결 실시간 모니터링
- CORS 정책 적용
- API 요청 타임아웃 설정

### 🏦 **계좌 보안**
- 실계좌 접근 시 관리자 승인 필수
- 계좌번호 형식 검증
- 미등록 계좌 접근 차단

---

## 🚀 배포 및 실행 가이드

### 1️⃣ **개발 환경 설정**
1. Visual Studio 2019 이상
2. SQL Server Express LocalDB
3. .NET Framework 4.7.2 이상

### 2️⃣ **프로젝트 실행 순서**
1. **UserManagementSystem API 서버 실행** (F5)
   - https://localhost:44309 확인
2. **admin.html 브라우저에서 열기**
   - 관리자 로그인 테스트
3. **StockAutoTrade2 Windows Forms 실행** (F5)
   - 사용자 로그인 테스트

### 3️⃣ **초기 테스트 계정**
- **관리자**: admin@company.com / admin123
- **테스트 사용자**: test@example.com / password123

---

## 🐛 문제 해결 가이드

### ❌ **일반적인 오류들**

#### 1. API 연결 실패
```
- API 서버가 실행 중인지 확인
- 포트 번호 확인 (44309)
- 방화벽 설정 확인
```

#### 2. 데이터베이스 연결 오류
```
- SQL Server LocalDB 설치 확인
- 연결 문자열 확인
- 마이그레이션 실행 확인
```

#### 3. 로그인 실패
```
- 사용자 계정이 등록되어 있는지 확인
- 비밀번호 해싱 확인
- 네트워크 연결 확인
```

#### 4. 계좌 접근 거부
```
- 계좌번호 형식 확인 (10자리, 5 또는 8로 시작)
- 실계좌인 경우 관리자 승인 상태 확인
- AccountVerified 필드 확인
```

---

## 📈 향후 개선 방안

### 🔧 **기능 확장**
1. **사용자 등급제** - 기본/프리미엄 사용자 구분
2. **로그 시스템** - 상세한 사용자 활동 로그
3. **알림 시스템** - 이메일/SMS 알림
4. **백업 시스템** - 자동 데이터베이스 백업

### 🛡️ **보안 강화**
1. **2FA 인증** - 이중 인증 시스템
2. **IP 제한** - 특정 IP에서만 접근 허용
3. **감사 로그** - 모든 관리자 작업 기록
4. **자동 로그아웃** - 일정 시간 비활성 시 자동 로그아웃

---

## 📞 지원 및 문의

### 🔍 **디버깅 정보**
- **API Base URL**: https://localhost:44309
- **데이터베이스**: UserManagementDB (LocalDB)
- **로그 위치**: Windows Forms logListBox 및 EntireLog

### 📝 **코드 수정 시 주의사항**
1. **네임스페이스 일관성** 유지
2. **API 엔드포인트 URL** 변경 시 모든 호출부 수정
3. **데이터베이스 스키마 변경** 시 마이그레이션 필수
4. **보안 관련 코드** 수정 시 충분한 테스트 필요

---

## 📚 참고 자료

### 🔗 **관련 기술 문서**
- [ASP.NET Core Web API](https://docs.microsoft.com/aspnet/core/web-api)
- [Entity Framework Core](https://docs.microsoft.com/ef/core)
- [BCrypt.NET](https://github.com/BcryptNet/bcrypt.net)
- [Windows Forms](https://docs.microsoft.com/dotnet/desktop/winforms)

### 📖 **프로젝트 히스토리**
1. **Phase 1**: 데이터베이스 설계 및 구축
2. **Phase 2**: Web API 개발 (사용자 등록, 인증)
3. **Phase 3**: 관리자 웹페이지 구현
4. **Phase 4**: Windows Forms 사용자 인증 시스템 추가
5. **Phase 5**: 계좌 관리 및 권한 시스템 구현

---

*이 문서는 UserManagement 시스템의 완전한 구현 가이드입니다. 새로운 채팅에서도 이 문서를 참고하여 빠르게 프로젝트를 재구성할 수 있습니다.*

**마지막 업데이트**: 2025년 6월 30일